// Code generated by MockGen. DO NOT EDIT.
// Source: task_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	error "asynchronous-ocr-server/error"
	model "asynchronous-ocr-server/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(ctx context.Context, toBeCreated model.Task) (model.Task, error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, toBeCreated)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(ctx, toBeCreated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), ctx, toBeCreated)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(ctx context.Context, tx *gorm.DB, specifier model.Task, optionalSpecifiers []model.Task) (model.Task, error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tx, specifier, optionalSpecifiers)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(ctx, tx, specifier, optionalSpecifiers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), ctx, tx, specifier, optionalSpecifiers)
}

// TryToGetOneWithLock mocks base method.
func (m *MockTaskRepository) TryToGetOneWithLock(ctx context.Context, tx *gorm.DB, specifier model.Task) (model.Task, error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryToGetOneWithLock", ctx, tx, specifier)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error.Error)
	return ret0, ret1
}

// TryToGetOneWithLock indicates an expected call of TryToGetOneWithLock.
func (mr *MockTaskRepositoryMockRecorder) TryToGetOneWithLock(ctx, tx, specifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryToGetOneWithLock", reflect.TypeOf((*MockTaskRepository)(nil).TryToGetOneWithLock), ctx, tx, specifier)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, tx *gorm.DB, newTask model.Task) (model.Task, error.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, newTask)
	ret0, _ := ret[0].(model.Task)
	ret1, _ := ret[1].(error.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, tx, newTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, tx, newTask)
}
